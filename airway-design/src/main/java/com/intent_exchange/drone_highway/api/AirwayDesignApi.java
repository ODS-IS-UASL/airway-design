/*
 * Copyright 2025 Intent Exchange, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * /** NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.8.0). https://openapi-generator.tech Do not edit the class manually.
 */
package com.intent_exchange.drone_highway.api;

import java.util.List;
import javax.annotation.Generated;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.NoHandlerFoundException;
import com.intent_exchange.drone_highway.entity.AirwayConditions;
import com.intent_exchange.drone_highway.entity.AirwayDeleteRequestEntity;
import com.intent_exchange.drone_highway.entity.AirwayEntity;
import com.intent_exchange.drone_highway.entity.AirwaysGSWPostRequestEntity;
import com.intent_exchange.drone_highway.entity.AirwaysPostRequestEntity;
import com.intent_exchange.drone_highway.entity.AirwaysPostResponseEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-11-25T10:40:19.604740900+09:00[Asia/Tokyo]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "航路情報", description = "航路情報 API")
public interface AirwayDesignApi {

  /**
   * GET /airway : 航路情報取得 ドローン航路システムから、指定された航路IDをキーにした航路情報を返却する。
   *
   * @param airwayId 航路ID 取得する航路のID。フラグを指定しない場合は必須。 (optional)
   * @param all 全航路取得 全件取得を行うかを指示するフラグ値。 trueの場合はairwayIdは無視する。 (optional, default to false)
   * @return 正常終了 (status code 200) or airwayIdが未指定且つ、allフラグがfalseの場合 (status code 400) or
   *         指定された航路IDが、データベースに存在しない場合に返却する。 (status code 404) or サーバ内部にて主に以下に該当する問題が検知された場合に返却する。
   *         ・他のサービスへのネットワークアクセスに失敗した ・サーバ内部でロジックの例外が検出された (status code 500)
   * @throws MethodArgumentNotValidException
   * @throws SecurityException
   * @throws NoSuchMethodException
   * @throws NoHandlerFoundException
   */
  @Operation(operationId = "airwayGet", summary = "航路情報取得",
      description = "ドローン航路システムから、指定された航路IDをキーにした航路情報を返却する。", tags = {"航路情報"},
      responses = {
          @ApiResponse(responseCode = "200", description = "正常終了",
              content = {@Content(mediaType = "application/json",
                  schema = @Schema(implementation = AirwayEntity.class))}),
          @ApiResponse(responseCode = "400", description = "airwayIdが未指定且つ、allフラグがfalseの場合 "),
          @ApiResponse(responseCode = "404", description = "指定された航路IDが、データベースに存在しない場合に返却する。"),
          @ApiResponse(responseCode = "500",
              description = "サーバ内部にて主に以下に該当する問題が検知された場合に返却する。  ・他のサービスへのネットワークアクセスに失敗した  ・サーバ内部でロジックの例外が検出された ")})
  @GetMapping(value = "/airway", produces = {"application/json"})

  ResponseEntity<AirwayEntity> airwayGet(@Valid AirwayConditions conditions,
      List<String> flightPurpose, String determinationDateFrom, String determinationDateTo,
      String businessNumber, String areaName) throws MethodArgumentNotValidException,
      NoSuchMethodException, SecurityException, NoHandlerFoundException;

  /**
   * POST /airway : 航路登録 画面で登録された航路情報を保存する。
   *
   * @param airwaysRequest (required)
   * @return 正常終了 (status code 200) or パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。
   *         ・必須指定されているパラメータが指定されていない場合 ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 (status code 400)
   *         or 指定された航路画定IDが、データベースに存在しない場合に返却する。 (status code 404) or
   *         サーバ内部にて主に以下に該当する問題が検知された場合に返却する。 ・他のサービスへのネットワークアクセスに失敗した ・サーバ内部でロジックの例外が検出された (status
   *         code 500)
   */
  @Operation(operationId = "airwayPost", summary = "航路登録", description = "画面で登録された航路情報を保存する。",
      tags = {"航路情報"},
      responses = {
          @ApiResponse(responseCode = "201", description = "正常終了",
              content = {@Content(mediaType = "application/json",
                  schema = @Schema(implementation = AirwaysPostResponseEntity.class))}),
          @ApiResponse(responseCode = "400",
              description = "パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。  ・必須指定されているパラメータが指定されていない場合  ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 "),
          @ApiResponse(responseCode = "404", description = "指定された航路画定IDが、データベースに存在しない場合に返却する。 "),
          @ApiResponse(responseCode = "500",
              description = "サーバ内部にて主に以下に該当する問題が検知された場合に返却する。  ・他のサービスへのネットワークアクセスに失敗した  ・サーバ内部でロジックの例外が検出された ")})
  @PostMapping(value = "/airway", consumes = {"application/json"})

  ResponseEntity<AirwaysPostResponseEntity> airwayPost(
      @Parameter(name = "AirwaysRequest", description = "",
          required = true) @Valid @RequestBody AirwaysPostRequestEntity airwaysRequest);

  /**
   * POST /gsw-airway : 航路登録(GSW) 指定された航路情報を保存する。
   *
   * @param airwaysGSWPostRequestEntity (required)
   * @return 正常終了 (status code 201) or パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。
   *         ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 (status code 400) or
   *         サーバ内部にて主に以下に該当する問題が検知された場合に返却する。 ・他のサービスへのネットワークアクセスに失敗した ・サーバ内部でロジックの例外が検出された (status
   *         code 500)
   */
  @Operation(operationId = "airwayPostGSW", summary = "航路登録(GSW)", description = "指定された航路情報を保存する。",
      tags = {"航路情報"},
      responses = {
          @ApiResponse(responseCode = "201", description = "正常終了",
              content = {@Content(mediaType = "application/json",
                  schema = @Schema(implementation = AirwaysPostResponseEntity.class))}),
          @ApiResponse(responseCode = "400",
              description = "パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。  ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 "),
          @ApiResponse(responseCode = "500",
              description = "サーバ内部にて主に以下に該当する問題が検知された場合に返却する。  ・他のサービスへのネットワークアクセスに失敗した  ・サーバ内部でロジックの例外が検出された ")})
  @PostMapping(value = "/gsw-airway", produces = {"application/json"},
      consumes = {"application/json"})

  ResponseEntity<AirwaysPostResponseEntity> airwayPostGSW(@Parameter(
      name = "AirwaysGSWPostRequestEntity", description = "",
      required = true) @Valid @RequestBody AirwaysGSWPostRequestEntity airwaysGSWPostRequestEntity);

  /**
   * DELETE /airway : 航路情報削除 ドローン航路システムから、航路を削除する。
   *
   * @param airwayId 航路ID (required)
   * @return 正常終了 (status code 204) or パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。
   *         ・必須指定されているパラメータが指定されていない場合 ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 (status code 400)
   *         or 指定された航路IDが、データベースに存在しない場合に返却する。 (status code 404) or
   *         サーバ内部にて主に以下に該当する問題が検知された場合に返却する。 ・他のサービスへのネットワークアクセスに失敗した ・サーバ内部でロジックの例外が検出された (status
   *         code 500)
   */
  @Operation(operationId = "airwayDelete", summary = "航路情報削除",
      description = "ドローン航路システムから、航路を削除する。", tags = {"AirwayDesign"},
      responses = {@ApiResponse(responseCode = "204", description = "正常終了"), @ApiResponse(
          responseCode = "400",
          description = "パラメータに誤りがある場合に返却する。具体的には以下のケースを想定する。  ・必須指定されているパラメータが指定されていない場合  ・指定されたパラメータにバイト数の上限があり且つ、最大バイトサイズが上限を超えた場合 "),
          @ApiResponse(responseCode = "404", description = "指定された航路IDが、データベースに存在しない場合に返却する。 "),
          @ApiResponse(responseCode = "500",
              description = "サーバ内部にて主に以下に該当する問題が検知された場合に返却する。  ・他のサービスへのネットワークアクセスに失敗した  ・サーバ内部でロジックの例外が検出された ")})
  @RequestMapping(method = RequestMethod.DELETE, value = "/airway")

  ResponseEntity<Void> airwayDelete(@Valid AirwayDeleteRequestEntity airwayDeleteRequestEntity)
      throws NoHandlerFoundException;

}

